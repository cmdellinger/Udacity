breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
View(diamonds)
# Adjust the code below to color the points by clarity.
# A layer called scale_color_brewer() has
# been added to adjust the legend and
# provide custom colors.
# See if you can figure out what it does.
# Links to resources are in the Instructor Notes.
# You will need to install the package RColorBrewer
# in R to get the same colors and color palettes.
# =======================================
# install and load the RColorBrewer package
# install.packages('RColorBrewer')
library(RColorBrewer)
# ggplot(aes(x = carat, y = price), data = diamonds) +
#   geom_point(alpha = 0.5, size = 1, position = 'jitter') +
#   scale_color_brewer(type = 'div',
#     guide = guide_legend(title = 'Clarity', reverse = T,
#     override.aes = list(alpha = 1, size = 2))) +
#   scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
#     breaks = c(0.2, 0.5, 1, 2, 3)) +
#   scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
#     breaks = c(350, 1000, 5000, 10000, 15000)) +
#   ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter', color = diamonds$clarity) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
# Adjust the code below to color the points by clarity.
# A layer called scale_color_brewer() has
# been added to adjust the legend and
# provide custom colors.
# See if you can figure out what it does.
# Links to resources are in the Instructor Notes.
# You will need to install the package RColorBrewer
# in R to get the same colors and color palettes.
# =======================================
# install and load the RColorBrewer package
# install.packages('RColorBrewer')
library(RColorBrewer)
# ggplot(aes(x = carat, y = price), data = diamonds) +
#   geom_point(alpha = 0.5, size = 1, position = 'jitter') +
#   scale_color_brewer(type = 'div',
#     guide = guide_legend(title = 'Clarity', reverse = T,
#     override.aes = list(alpha = 1, size = 2))) +
#   scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
#     breaks = c(0.2, 0.5, 1, 2, 3)) +
#   scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
#     breaks = c(350, 1000, 5000, 10000, 15000)) +
#   ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(aes(colour = clarity),
alpha = 0.5, size = 1,
position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
# Adjust the code below to color the points by clarity.
# A layer called scale_color_brewer() has
# been added to adjust the legend and
# provide custom colors.
# See if you can figure out what it does.
# Links to resources are in the Instructor Notes.
# You will need to install the package RColorBrewer
# in R to get the same colors and color palettes.
# =======================================
# install and load the RColorBrewer package
# install.packages('RColorBrewer')
library(RColorBrewer)
# ggplot(aes(x = carat, y = price), data = diamonds) +
#   geom_point(alpha = 0.5, size = 1, position = 'jitter') +
#   scale_color_brewer(type = 'div',
#     guide = guide_legend(title = 'Clarity', reverse = T,
#     override.aes = list(alpha = 1, size = 2))) +
#   scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
#     breaks = c(0.2, 0.5, 1, 2, 3)) +
#   scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
#     breaks = c(350, 1000, 5000, 10000, 15000)) +
#   ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, colour = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
# Let’s look at cut and see if we find a similar result.
# Adjust the code below to color the points by cut.
# Change any other parts of the code as needed.
# ALTER THE CODE BELOW THIS LINE
# =========================================================================================
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = Cut, reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
# Finally, let’s use diamond color to color our plot.
# Adjust the code below to color the points by diamond colors
# and change the titles.
# ALTER THE CODE BELOW THIS LINE
# ===========================================================================================
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
# Finally, let’s use diamond color to color our plot.
# Adjust the code below to color the points by diamond colors
# and change the titles.
# ALTER THE CODE BELOW THIS LINE
# ===========================================================================================
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', # reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
# Finally, let’s use diamond color to color our plot.
# Adjust the code below to color the points by diamond colors
# and change the titles.
# ALTER THE CODE BELOW THIS LINE
# ===========================================================================================
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = False,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
# Finally, let’s use diamond color to color our plot.
# Adjust the code below to color the points by diamond colors
# and change the titles.
# ALTER THE CODE BELOW THIS LINE
# ===========================================================================================
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = FALSE,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5, sdigits = 3)
install.packages(c("RCurl", "bitops"))
# install.package('bitops')
# install.packages('RCurl')
library('bitops')
library('RCurl')
diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
load(rawConnection(diamondsurl))
# Your task is to build five linear models like Solomon
# did for the diamonds data set only this
# time you'll use a sample of diamonds from the
# diamondsbig data set.
# Be sure to make use of the same variables
# (logprice, carat, etc.) and model
# names (m1, m2, m3, m4, m5).
# To get the diamondsbig data into RStudio
# on your machine, copy, paste, and run the
# code in the Instructor Notes. There's
# 598,024 diamonds in this data set!
# Since the data set is so large,
# you are going to use a sample of the
# data set to compute the models. You can use
# the entire data set on your machine which
# will produce slightly different coefficients
# and statistics for the models.
# This exercise WILL BE automatically graded.
# You can leave off the code to load in the data.
# We've sampled the data for you.
# You also don't need code to create the table output of the models.
# We'll do that for you and check your model summaries (R^2 values, AIC, etc.)
# Your task is to write the code to create the models.
# DO NOT ALTER THE CODE BELOW THIS LINE (Reads in a sample of the diamondsbig data set)
#===========================================================================================
diamondsBigSample <- read.csv('diamondsBigSample.csv')
# Your task is to build five linear models like Solomon
# did for the diamonds data set only this
# time you'll use a sample of diamonds from the
# diamondsbig data set.
# Be sure to make use of the same variables
# (logprice, carat, etc.) and model
# names (m1, m2, m3, m4, m5).
# To get the diamondsbig data into RStudio
# on your machine, copy, paste, and run the
# code in the Instructor Notes. There's
# 598,024 diamonds in this data set!
# Since the data set is so large,
# you are going to use a sample of the
# data set to compute the models. You can use
# the entire data set on your machine which
# will produce slightly different coefficients
# and statistics for the models.
# This exercise WILL BE automatically graded.
# You can leave off the code to load in the data.
# We've sampled the data for you.
# You also don't need code to create the table output of the models.
# We'll do that for you and check your model summaries (R^2 values, AIC, etc.)
# Your task is to write the code to create the models.
# DO NOT ALTER THE CODE BELOW THIS LINE (Reads in a sample of the diamondsbig data set)
#===========================================================================================
# diamondsBigSample <- read.csv('diamondsBigSample.csv')
diamondsBigSample <- read.csv('diamondsbig.csv')
# ENTER YOUR CODE BELOW THIS LINE. (Create the five models)
#===========================================================================================
# m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamondsBigSample)
# m2 <- update(m1, ~ . + carat)
# m3 <- update(m2, ~ . + cut)
# m4 <- update(m3, ~ . + color)
# m5 <- update(m4, ~ . + clarity)
# mtable(m1, m2, m3, m4, m5, sdigits = 3)
# video version:
diamondsbig$logprice = log(diamondsbig$price)
# Your task is to build five linear models like Solomon
# did for the diamonds data set only this
# time you'll use a sample of diamonds from the
# diamondsbig data set.
# Be sure to make use of the same variables
# (logprice, carat, etc.) and model
# names (m1, m2, m3, m4, m5).
# To get the diamondsbig data into RStudio
# on your machine, copy, paste, and run the
# code in the Instructor Notes. There's
# 598,024 diamonds in this data set!
# Since the data set is so large,
# you are going to use a sample of the
# data set to compute the models. You can use
# the entire data set on your machine which
# will produce slightly different coefficients
# and statistics for the models.
# This exercise WILL BE automatically graded.
# You can leave off the code to load in the data.
# We've sampled the data for you.
# You also don't need code to create the table output of the models.
# We'll do that for you and check your model summaries (R^2 values, AIC, etc.)
# Your task is to write the code to create the models.
# DO NOT ALTER THE CODE BELOW THIS LINE (Reads in a sample of the diamondsbig data set)
#===========================================================================================
# diamondsBigSample <- read.csv('diamondsBigSample.csv')
diamondsbig <- read.csv('diamondsbig.csv')
# ENTER YOUR CODE BELOW THIS LINE. (Create the five models)
#===========================================================================================
# m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamondsBigSample)
# m2 <- update(m1, ~ . + carat)
# m3 <- update(m2, ~ . + cut)
# m4 <- update(m3, ~ . + color)
# m5 <- update(m4, ~ . + clarity)
# mtable(m1, m2, m3, m4, m5, sdigits = 3)
# video version:
diamondsbig$logprice = log(diamondsbig$price)
m1 <- lm(logprice ~ I(carat^(1/3)),
data=diamondsbig[diamondsbig$price < 10000 &
diamondsbig$cert == "GIA",])
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
#Be sure you’ve loaded the library memisc and have m5 saved as an object in your workspace.
thisDiamond = data.frame(carat = 1.00, cut = "V.Good",
color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
#Be sure you’ve loaded the library memisc and have m5 saved as an object in your workspace.
thisDiamond = data.frame(carat = 1.00, cut = "V.Good",
color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
View(modelEstimate)
View(modelEstimate)
exp(modelEstimate)
dat = data.frame(m4$model, m4$residuals)
with(dat, sd(m4.residuals))
with(subset(dat, carat > .9 & carat < 1.1), sd(m4.residuals))
dat$resid <- as.numeric(dat$m4.residuals)
ggplot(aes(y = resid, x = round(carat, 2)), data = dat) +
geom_line(stat = "summary", fun.y = sd)
setwd('/Users/charlesdellinger/Documents/GitHub/Udacity/Data-Analysis-Nanodegree/Term\ 2/P1')
# Load the Data
loanData <- read.csv('prosperLoanData.csv')
names(loanData)
str(loanData)
summary(loanData)
View(loanData)
View(loanData)
View(loanData$Occupation)
ggplot(aes(IncomeRange), data = loanData) +
geom_histogram()
# Load all of the packages that you end up using in your analysis in this code
# chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk. This
# prevents the code from displaying in the knitted HTML output. You should set
# echo=FALSE for all code chunks in your file, unless it makes sense for your
# report to show the code that generated a particular plot.
# The other parameters for "message" and "warning" should also be set to FALSE
# for other code chunks once you have verified that each plot comes out as you
# want it to. This will clean up the flow of your report.
library(ggplot2)
ggplot(aes(IncomeRange), data = loanData) +
geom_histogram()
ggplot(aes(x = IncomeRange), data = loanData) +
geom_histogram()
ggplot(aes(x = IncomeRange), data = loanData) +
geom_histogram(stat="count")
ggplot(aes(x = IncomeRange), data = loanData) +
geom_histogram(stat="count") + coord_flip()
str(loanData$IncomeRange)
str(loanData$IncomeRange)
levels(loanData$IncomeRange)
# IncomeRange is unordered; create ordered factor
loan$IncomeRange = factor(loan$IncomeRange,levels= c("Not displayed",
"Not employed",
"$0",
"$1-24,999",
"$25,000-49,999",
"$50,000-74,999",
"$75,000-99,999",
"$100,000+"))
# IncomeRange is unordered; create ordered factor
loanData$IncomeRange = factor(loanData$IncomeRange,
levels= c("Not displayed",
"Not employed",
"$0",
"$1-24,999",
"$25,000-49,999",
"$50,000-74,999",
"$75,000-99,999",
"$100,000+"))
ggplot(aes(x = IncomeRange), data = loanData) +
geom_histogram(stat="count") + coord_flip()
ggplot(aes(x = IncomeRange), data = loanData) +
geom_histogram(stat="count") + coord_flip()
View(loanData)
str(loanData$IncomeVerifiable)
ggplot(aes(x = IncomeRange), data = loanData) +
geom_histogram(stat="count") + coord_flip()
ggplot(aes(x = IncomeRange), data = subset(loanData, IncomeVerifiable == TRUE) +
geom_histogram(stat="count") + coord_flip()
ggplot(aes(x = IncomeRange), data = subset(loanData, IncomeVerifiable == TRUE)) +
geom_histogram(stat="count") + coord_flip()
table(loanData$IncomeVerifiable)
ggplot(aes(x = IncomeRange), data = subset(loanData, IncomeVerifiable)) +
geom_histogram(stat="count") + coord_flip()
ggplot(aes(x = IncomeRange), data = subset(loanData, IncomeVerifiable == TRUE)) +
geom_histogram(stat="count") + coord_flip()
ggplot(aes(x = IncomeRange), data = loanData) +
geom_histogram(stat="count") + coord_flip()
ggplot(aes(x = Occupation), data = loanData) +
geom_histogram(stat="count") + coord_flip()
ggplot(aes(x = Occupation), data = loanData) +
geom_histogram() + coord_flip()
ggplot(aes(x = Occupation), data = loanData) +
geom_histogram(stat="count") + coord_flip()
ggplot(aes(x = DebtToIncomeRatio), data = loanData) +
geom_line() + coord_flip()
ggplot(aes(x = DebtToIncomeRatio), data = loanData) +
geom_histogram() + coord_flip()
ggplot(aes(x = DebtToIncomeRatio), data = loanData) +
geom_histogram()
summary(DebtToIncomeRatio)
summary(loanData$DebtToIncomeRatio)
ggplot(aes(x = DebtToIncomeRatio), data = loanData) +
geom_histogram()
summary(loanData$DebtToIncomeRatio)
ggplot(aes(x = DebtToIncomeRatio), data = loanData) +
geom_histogram() + scale_y_log10()
summary(loanData$Term)
ggplot(aes(x = Term), data = loanData) +
geom_histogram()# + scale_y_log10()
summary(loanData$Term)
ggplot(aes(x = Term), data = loanData) +
geom_histogram(binwidth = 1)
ggplot(aes(x = DelinquenciesLast7Years), data = loanData) +
geom_histogram()
ggplot(aes(x = DelinquenciesLast7Years), data = loanData) +
geom_histogram()
ggplot(aes(x = TotalTrades), data = loanData) +
geom_histogram()
ggplot(aes(x = TradesNeverDelinquent), data = loanData) +
geom_histogram()
names(loanData)
str(loanData)
summary(loanData)
ggplot(aes(x = DelinquenciesLast7Years), data = loanData) +
geom_histogram()
ggplot(aes(x = TotalTrades), data = loanData) +
geom_histogram()
ggplot(aes(x = "TradesNeverDelinquent..percentage."), data = loanData) +
geom_histogram()
ggplot(aes(x = DelinquenciesLast7Years), data = loanData) +
geom_histogram()
ggplot(aes(x = TotalTrades), data = loanData) +
geom_histogram()
ggplot(aes(x = "TradesNeverDelinquent..percentage."), data = loanData) +
geom_histogram(stat='count')
summary(TradesNeverDelinquent..percentage.)
summary(loanData$TradesNeverDelinquent..percentage.)
summary(loanData$StatedMonthlyIncome)
ggplot(aes(x = Term), data = loanData) +
geom_histogram(binwidth = 1)
summary(loanData$StatedMonthlyIncome)
ggplot(aes(x = Term), data = loanData) +
geom_histogram(binwidth = 1) + coord_flip()
ggplot(aes(x = ProsperScore), data = loanData) +
geom_histogram()
ggplot(aes(x = ProsperScore), data = loanData) +
geom_histogram(breaks=seq(0,10,1))
ggplot(aes(x = ProsperScore), data = loanData) +
geom_histogram(binwidth = 1, breaks=seq(0,10,1))
ggplot(aes(x = ProsperScore), data = loanData) +
geom_histogram(binwidth = 1, breaks=seq(0,11,1))
ggplot(aes(x = ProsperScore), data = loanData) +
geom_histogram(binwidth = 1, breaks=seq(0,11,1))
ggplot(aes(x = ProsperScore), data = loanData) +
geom_histogram()
ggplot(aes(x = ProsperScore), data = loanData) +
geom_histogram(binwidth = 1, breaks=seq(0,11,1))
ggplot(aes(x = ProsperScore), data = loanData) +
geom_histogram()
table(ProsperScore)
ggplot(aes(x = ProsperScore), data = loanData) +
geom_histogram(binwidth = 1, breaks=seq(0,11,1))
ggplot(aes(x = ProsperScore), data = loanData) +
geom_histogram()
table(loanData$ProsperScore)
ggplot(aes(x = BorrowerAPR), data = loanData) +
geom_histogram()
ggplot(aes(x = BorrowerAPR), data = loanData) +
geom_histogram(binwidth = 0.05)
ggplot(aes(x = BorrowerAPR), data = loanData) +
geom_histogram()
summary(loanData$Term)
ggplot(aes(x = Term), data = loanData) +
geom_histogram(binwidth = 1) + coord_flip()
str(loanData$Term)
# there are three clear term lengths
ggplot(aes(x = Term), data = loanData) +
geom_histogram(binwidth = 1) + coord_flip()
unique(loanData$Term)
# there are three clear term lengths
ggplot(aes(x = Term), data = loanData) +
geom_histogram(binwidth = 1) + coord_flip()
table(loanData$Term)
?table
