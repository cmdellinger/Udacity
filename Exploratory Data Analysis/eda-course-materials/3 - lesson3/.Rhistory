ggplot(aes(x = age, y = friendships_initiated), data = pf)
#names(pf)
# Examine the relationship between
# friendships_initiated (y) and age (x)
# using the ggplot syntax.
# We recommend creating a basic scatter
# plot first to see what the distribution looks like.
# and then adjusting it by adding one layer at a time.
# What are your observations about your final plot?
# Remember to make adjustments to the breaks
# of the x-axis and to use apply alpha and jitter.
qplot(x = age, y = friendships_initiated, data = pf)
ggplot(aes(age,friendships_initiated), data = pf)
#names(pf)
# Examine the relationship between
# friendships_initiated (y) and age (x)
# using the ggplot syntax.
# We recommend creating a basic scatter
# plot first to see what the distribution looks like.
# and then adjusting it by adding one layer at a time.
# What are your observations about your final plot?
# Remember to make adjustments to the breaks
# of the x-axis and to use apply alpha and jitter.
qplot(x = age, y = friendships_initiated, data = pf)
ggplot(aes(friendships_initiated, age), data = pf)
#names(pf)
# Examine the relationship between
# friendships_initiated (y) and age (x)
# using the ggplot syntax.
# We recommend creating a basic scatter
# plot first to see what the distribution looks like.
# and then adjusting it by adding one layer at a time.
# What are your observations about your final plot?
# Remember to make adjustments to the breaks
# of the x-axis and to use apply alpha and jitter.
qplot(x = age, y = friendships_initiated, data = pf)
ggplot(aes(x = age, y = friendships_initiated), data = pf)
#names(pf)
# not sure why this is separate from above since the directions weren't provided
# jitter both adds and subtracts, so using jitter gives negative which with
# sqrt gives imaginary numbers
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point(alpha = 1/20) + xlim(13,90) +
coord_trans(y = "sqrt")
# to add jitter, need to use more advanced syntax
ggplot(aes(x = age, y = friendships_initiated), data = pf) +
geom_point(alpha = 1/20, position = position_jitter(h = 0)) +
xlim(13,90) +
coord_trans(y = "sqrt")
# not sure why this is separate from above since the directions weren't provided
# jitter both adds and subtracts, so using jitter gives negative which with
# sqrt gives imaginary numbers
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point(alpha = 1/20) + xlim(13,90) +
coord_trans(y = "sqrt")
# to add jitter, need to use more advanced syntax
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point(alpha = 1/20, position = position_jitter(h = 0)) +
xlim(13,90) +
coord_trans(y = "sqrt")
# Examine the relationship between
# friendships_initiated (y) and age (x)
# using the ggplot syntax.
# We recommend creating a basic scatter
# plot first to see what the distribution looks like.
# and then adjusting it by adding one layer at a time.
# What are your observations about your final plot?
# Remember to make adjustments to the breaks
# of the x-axis and to use apply alpha and jitter.
qplot(x = age, y = friendships_initiated, data = pf)
ggplot(aes(x = age, y = friendships_initiated), data = pf)
#names(pf)
ggplot(aes(x = age, y = friendships_initiated), data = pf) +
geom_point(alpha = 1/20, position = position_jitter(h = 0)) +
xlim(13,90) +
coord_trans(y = "sqrt")
# Examine the relationship between
# friendships_initiated (y) and age (x)
# using the ggplot syntax.
# We recommend creating a basic scatter
# plot first to see what the distribution looks like.
# and then adjusting it by adding one layer at a time.
# What are your observations about your final plot?
# Remember to make adjustments to the breaks
# of the x-axis and to use apply alpha and jitter.
qplot(x = age, y = friendships_initiated, data = pf)
ggplot(aes(x = age, y = friendships_initiated), data = pf) +
geom_point(alpha = 1/20)
#names(pf)
ggplot(aes(x = age, y = friendships_initiated), data = pf) +
geom_point(alpha = 1/20, position = position_jitter(h = 0)) +
xlim(13,90) +
coord_trans(y = "sqrt")
library(dplyr)
# commonly used functions:
#    filter()
#    group_by()
#    mutate()
#    arrange()
library(dplyr)
# commonly used functions:
#    filter()
#    group_by()
#    mutate()
#    arrange()
age_groups <- group_by(pf, age)
pf.fc_by_age <- summarise(age_groups,
friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n())
head(pf.fc_by_age)
library(dplyr)
# commonly used functions:
#    filter()
#    group_by()
#    mutate()
#    arrange()
age_groups <- group_by(pf, age)
pf.fc_by_age <- summarise(age_groups,
friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n())
pf.fc_by_age <- arrange(pf.fc_by_age, age)
head(pf.fc_by_age)
library(dplyr)
# commonly used functions:
#    filter()
#    group_by()
#    mutate()
#    arrange()
age_groups <- group_by(pf, age)
pf.fc_by_age <- summarise(age_groups,
friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n())
pf.fc_by_age <- arrange(pf.fc_by_age, age)
head(pf.fc_by_age)
# another way to do the same thing
pf.fc_by_age <- pf %<%
group_by(age) %<%
summarise(age_groups,
friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n()) %<%
arrange(age)
library(dplyr)
# commonly used functions:
#    filter()
#    group_by()
#    mutate()
#    arrange()
age_groups <- group_by(pf, age)
pf.fc_by_age <- summarise(age_groups,
friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n())
pf.fc_by_age <- arrange(pf.fc_by_age, age)
head(pf.fc_by_age)
# another way to do the same thing
pf.fc_by_age <- pf %>%
group_by(age) %>%
summarise(age_groups,
friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n()) %>%
arrange(age)
library(dplyr)
# commonly used functions:
#    filter()
#    group_by()
#    mutate()
#    arrange()
age_groups <- group_by(pf, age)
pf.fc_by_age <- summarise(age_groups,
friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n())
pf.fc_by_age <- arrange(pf.fc_by_age, age)
head(pf.fc_by_age)
# another way to do the same thing
pf.fc_by_age <- pf %>%
group_by(age) %>%
summarise(friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n()) %>%
arrange(age)
head(pf.fc_by_age)
ggplot(aes(x = age, y = friend_count_mean), data = pf.fc_by_age) +
geom_line()
?geom_line
ggplot(aes(x = age, y = friend_count_mean), data = pf.fc_by_age) +
geom_line() + xlim(13,80)
ggplot(aes(x = age, y = friend_count_mean), data = pf.fc_by_age) +
geom_line() + xlim(13,80) + coord_trans(y = "sqrt")
ggplot(aes(x = age, y = friend_count_mean), data = pf.fc_by_age) +
geom_line() + xlim(13,80) + coord_trans(y = "log10")
ggplot(aes(x = age, y = friend_count_mean), data = pf.fc_by_age) +
geom_line() + xlim(13,80) + coord_trans(y = "sqrt")
ggplot(aes(x = age, y = friend_count_mean), data = pf.fc_by_age) +
geom_line() + xlim(13,80) + coord_trans(y = "log10")
ggplot(aes(x = age, y = friend_count), data = pf) +
xlim(13,80) +
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange') +
coord_trans(y = "sqrt") +
geom_line(stat = 'summary', fun.y = mean)
ggplot(aes(x = age, y = friend_count), data = pf) +
xlim(13,80) +
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange') +
coord_trans(y = "sqrt") +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile, prob = 0.1)
ggplot(aes(x = age, y = friend_count), data = pf) +
xlim(13,80) +
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange') +
coord_trans(y = "sqrt") +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile, probs = 0.1)
ggplot(aes(x = age, y = friend_count), data = pf) +
xlim(13,80) +
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange') +
coord_trans(y = "sqrt") +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile, prob = 0.1,
linetype = 2, color = 'blue')
?quantile
ggplot(aes(x = age, y = friend_count), data = pf) +
xlim(13,80) +
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange') +
coord_trans(y = "sqrt") +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile, probs = 0.1,
linetype = 2, color = 'blue')
?geom_line
ggplot(aes(x = age, y = friend_count), data = pf) +
xlim(13,80) +
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange') +
coord_trans(y = "sqrt") +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = (quantile, probs = 0.1),
ggplot(aes(x = age, y = friend_count), data = pf) +
xlim(13,80) +
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange') +
coord_trans(y = "sqrt") +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile,
fun.args=list(probs=0.1),
linetype = 2, color = 'blue')
ggplot(aes(x = age, y = friend_count), data = pf) +
xlim(13,80) +
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange') +
coord_trans(y = "sqrt") +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile,
fun.args=list(probs=0.1),
linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile,
fun.args=list(probs=0.9),
linetype = 2, color = 'blue')
ggplot(aes(x = age, y = friend_count), data = pf) +
xlim(13,80) +
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange') +
coord_trans(y = "sqrt") +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile,
fun.args=list(probs=0.1),
linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile,
fun.args=list(probs=0.5),
linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile,
fun.args=list(probs=0.9),
linetype = 2, color = 'blue')
ggplot(aes(x = age, y = friend_count), data = pf) +
xlim(13,80) +
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange') +
coord_trans(y = "sqrt") +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile,
fun.args=list(probs=0.1),
linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile,
fun.args=list(probs=0.5),
linetype = 1, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile,
fun.args=list(probs=0.9),
linetype = 2, color = 'blue')
ggplot(aes(x = age, y = friend_count), data = pf) +
xlim(13,80) +
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange') +
coord_trans(y = "sqrt") +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile,
fun.args=list(probs=0.1),
linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile,
fun.args=list(probs=0.5),
linetype = 1, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile,
fun.args=list(probs=0.9),
linetype = 2, color = 'blue')
ggplot(aes(x = age, y = friend_count), data = pf) +
coord_cartesian(xlim = c(13, 70), ylim = c(0, 1000))
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange') +
coord_trans(y = "sqrt") +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile,
fun.args=list(probs=0.1),
linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile,
fun.args=list(probs=0.5),
linetype = 1, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile,
fun.args=list(probs=0.9),
linetype = 2, color = 'blue')
ggplot(aes(x = age, y = friend_count), data = pf) +
xlim(13,80) +
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange') +
coord_trans(y = "sqrt") +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile,
fun.args=list(probs=0.1),
linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile,
fun.args=list(probs=0.5),
linetype = 1, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile,
fun.args=list(probs=0.9),
linetype = 2, color = 'blue')
ggplot(aes(x = age, y = friend_count), data = pf) +
coord_cartesian(xlim = c(13, 70), ylim = c(0, 1000))
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange') +
coord_trans(y = "sqrt") +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile,
fun.args=list(probs=0.1),
linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile,
fun.args=list(probs=0.5),
linetype = 1, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile,
fun.args=list(probs=0.9),
linetype = 2, color = 'blue')
ggplot(aes(x = age, y = friend_count), data = pf) +
xlim(13,80) +
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange') +
coord_trans(y = "sqrt") +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile,
fun.args=list(probs=0.1),
linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile,
fun.args=list(probs=0.5),
linetype = 1, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile,
fun.args=list(probs=0.9),
linetype = 2, color = 'blue')
ggplot(aes(x = age, y = friend_count), data = pf) +
coord_cartesian(xlim = c(13, 70), ylim = c(0, 1000)) +
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange') +
coord_trans(y = "sqrt") +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile,
fun.args=list(probs=0.1),
linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile,
fun.args=list(probs=0.5),
linetype = 1, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile,
fun.args=list(probs=0.9),
linetype = 2, color = 'blue')
cor.test
?cor.test
cor.test(pf$age, pf$friend_count)
cor.test(pf$age, pf$friend_count)
# alternative way
with(pf, cor.test(age, friend_count))
with(subset(pf, pf$age < 70), cor.test(age, friend_count))
with(subset(pf, age < 70), cor.test(age, friend_count))
with(subset(pf, age < 70), cor.test(age, friend_count,
method = 'spearman'))
with(subset(pf, age <= 70), cor.test(age, friend_count,
method = 'spearman'))
names(pf)
# Create a scatterplot of likes_received (y)
# vs. www_likes_received (x). Use any of the
# techniques that you've learned so far to
# modify the plot.
ggplot(aes(x = www_likes_received, y = likes_received), data = pf) +
geom_point(alpha = 0.05)
# Create a scatterplot of likes_received (y)
# vs. www_likes_received (x). Use any of the
# techniques that you've learned so far to
# modify the plot.
ggplot(aes(x = www_likes_received, y = likes_received), data = pf) +
geom_point(alpha = 1/20)
# Create a scatterplot of likes_received (y)
# vs. www_likes_received (x). Use any of the
# techniques that you've learned so far to
# modify the plot.
ggplot(aes(x = www_likes_received, y = likes_received), data = pf) +
geom_point(alpha = 1/20) + coord_trans(y = "log10")
# Create a scatterplot of likes_received (y)
# vs. www_likes_received (x). Use any of the
# techniques that you've learned so far to
# modify the plot.
ggplot(aes(x = www_likes_received, y = likes_received), data = pf) +
geom_point(alpha = 1/20) #+ coord_trans(y = "log10")
# Create a scatterplot of likes_received (y)
# vs. www_likes_received (x). Use any of the
# techniques that you've learned so far to
# modify the plot.
ggplot(aes(x = www_likes_received, y = likes_received), data = pf) +
geom_point(alpha = 1/20) + coord_trans(x = "log10", y = "log10")
# Create a scatterplot of likes_received (y)
# vs. www_likes_received (x). Use any of the
# techniques that you've learned so far to
# modify the plot.
ggplot(aes(x = www_likes_received, y = likes_received), data = pf) +
geom_point(alpha = 1/20) + coord_trans(x = "sqrt", y = "sqrt")
# Create a scatterplot of likes_received (y)
# vs. www_likes_received (x). Use any of the
# techniques that you've learned so far to
# modify the plot.
ggplot(aes(x = www_likes_received, y = likes_received), data = pf) +
coord_cartesian(xlim = c(0, 25000), ylim = c(0, 25000)) +
geom_point(alpha = 1/20) + coord_trans(x = "sqrt", y = "sqrt")
# Create a scatterplot of likes_received (y)
# vs. www_likes_received (x). Use any of the
# techniques that you've learned so far to
# modify the plot.
ggplot(aes(x = www_likes_received, y = likes_received), data = pf) +
coord_cartesian(xlim = c(0, 10000), ylim = c(0, 25000)) +
geom_point(alpha = 1/20) + coord_trans(x = "sqrt", y = "sqrt")
# Create a scatterplot of likes_received (y)
# vs. www_likes_received (x). Use any of the
# techniques that you've learned so far to
# modify the plot.
ggplot(aes(x = www_likes_received, y = likes_received), data = pf) +
coord_cartesian(xlim = c(0, 10000), ylim = c(0, 10000)) +
geom_point(alpha = 1/20) + coord_trans(x = "sqrt", y = "sqrt")
# Create a scatterplot of likes_received (y)
# vs. www_likes_received (x). Use any of the
# techniques that you've learned so far to
# modify the plot.
ggplot(aes(x = www_likes_received, y = likes_received), data = pf) +
coord_cartesian(xlim = c(0, 10000), ylim = c(0, 10000)) +
geom_point(alpha = 1/20)# + coord_trans(x = "sqrt", y = "sqrt")
# Create a scatterplot of likes_received (y)
# vs. www_likes_received (x). Use any of the
# techniques that you've learned so far to
# modify the plot.
ggplot(aes(x = www_likes_received, y = likes_received), data = pf) +
coord_cartesian(xlim = c(0, 10000), ylim = c(0, 10000)) +
geom_point(alpha = 1/20)
# Create a scatterplot of likes_received (y)
# vs. www_likes_received (x). Use any of the
# techniques that you've learned so far to
# modify the plot.
ggplot(aes(x = www_likes_received, y = likes_received), data = pf) +
coord_cartesian(xlim = c(0, 10000), ylim = c(0, 10000)) +
geom_point(alpha = 1/20) + geom_abline()
?geom_abline
ggplot(aes(x = www_likes_received, y = likes_received), data = pf) +
geom_point() +
xlim(0, quantile(pf$www_likes_received, 0.95)) +
ylim(0, quantile(pf$likes_received, 0.95))
ggplot(aes(x = www_likes_received, y = likes_received), data = pf) +
geom_point() +
xlim(0, quantile(pf$www_likes_received, 0.95)) +
ylim(0, quantile(pf$likes_received, 0.95)) +
geom_smooth(method = 'lm', color = 'red')
cor.test(www_likes_received, likes_received)
with(pf, cor.test(www_likes_received, likes_received))
install.packages('alr3')
library(alr3)
install.packages('alr3')
install.packages('alr3')
library('alr3')
install.packages('alr3', dependencies = TRUE)
library(alr3)
